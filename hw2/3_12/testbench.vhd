----------------------------------------------------------------------
-- Test Bench for 4 coefficient FIR filter (exercise 3.12)
-- Kevin Sheng

----------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

----------------------------------------------------------------------

entity fir_tb is
end entity fir_tb;

architecture testbench of fir_tb is
    signal x_test : std_logic_vector(15 downto 0);
    signal y_test : std_logic_vector(17 downto 0);
    signal h0     : std_logic_vector(15 downto 0);
    signal h1     : std_logic_vector(15 downto 0);
    signal clock  : std_logic := '0';
    signal stop   : std_logic := '0';
    
    component fir is
        port (x   : in std_logic_vector(15 downto 0);
              y   : out std_logic_vector(17 downto 0); 
              h03 : in std_logic_vector(15 downto 0); 
              h12 : in std_logic_vector(15 downto 0); 
              clk : in std_logic
        );
    end component;
    
begin
        UUT: fir port map (x => x_test, y => y_test, h03 => h0, h12 => h1, clk => clock);
        clock <= not clock after 5 ns when stop /= '1' else '0';
        
        process
        begin
            -------------------------------------------
            -- Tested against white noise between -.5 
            -- and .5 generated by MATLAB filtered by LPF.
            -- Saturation avoided with test case since it won't
            -- occur in MATLAB, the folding optimization
            -- is not used. 
            -------------------------------------------
            
            -- h0 = .1834, h1 = .2751, low pass filter
            h0 <= "0001011101111010";
            h1 <= "0010001100110110";
            -- Clear all registers by clocking in 0
            x_test <= "0000000000000000";
            wait for 100 ns;

            -- X input vector is 10 points of white noise generated by MATLAB
            x_test <= "0001000001001101";
            wait for 10 ns;
            assert y_test = "000000101111110101"
            report "Error: Incorrect Output"
            severity failure;
            
            x_test <= "1100001011000101";
            wait for 10 ns;
            assert y_test = "111110010100000100"
            report "Error: Incorrect Output"
            severity failure;
            
            x_test <= "0011010010001110";
            wait for 10 ns;
            assert y_test = "111111010100011110"
            report "Error: Incorrect Output"
            severity failure;
            
            x_test <= "0010011001111001";
            wait for 10 ns;
            assert y_test = "000001111010100011"
            report "Error: Incorrect Output"
            severity failure;
            
            x_test <= "0001111101111000";
            wait for 10 ns;
            assert y_test = "000100111001010100"
            report "Error: Incorrect Output"
            -- Not the same as MATLAB because of rounding differences. 
            -- This adds symmetric taps and multiplies by the coefficient before rounding and truncating
            -- MATLAB test code multiplies each coefficient by the corresponding x[n-i] and then rounds. 
            severity failure;
            
            x_test <= "0010100000010100";
            wait for 10 ns;
            assert y_test = "001001000011101011"
            report "Error: Incorrect Output"
            -- See above comment on rounding
            severity failure;
            
            x_test <= "1111000100010000";
            wait for 10 ns;
            assert y_test = "000101111111111110"
            report "Error: Incorrect Output"
            severity failure;
            
            x_test <= "0000111100000011";
            wait for 10 ns;
            assert y_test = "000011110111000011"
            report "Error: Incorrect Output"
            -- See above comment on rounding
            severity failure;
            
            x_test <= "0000100110101010";
            wait for 10 ns;
            assert y_test = "000010010010010011"
            report "Error: Incorrect Output"
            severity failure;
            
            x_test <= "0000001111011001";
            wait for 10 ns;
            assert y_test = "000001001100000100"
            report "Error: Incorrect Output"
            severity failure;
            
            stop <= '1';
        end process;
end architecture testbench;
